// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Api.pb.h"

@implementation ApiRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ApiRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Plakat ()
@property int32_t id;
@property Float64 lon;
@property Float64 lat;
@property (strong) NSString* type;
@property (strong) NSString* lastModifiedUser;
@property int32_t lastModifiedTime;
@property (strong) NSString* comment;
@property (strong) NSString* imageUrl;
@end

@implementation Plakat

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasLon {
  return !!hasLon_;
}
- (void) setHasLon:(BOOL) value_ {
  hasLon_ = !!value_;
}
@synthesize lon;
- (BOOL) hasLat {
  return !!hasLat_;
}
- (void) setHasLat:(BOOL) value_ {
  hasLat_ = !!value_;
}
@synthesize lat;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasLastModifiedUser {
  return !!hasLastModifiedUser_;
}
- (void) setHasLastModifiedUser:(BOOL) value_ {
  hasLastModifiedUser_ = !!value_;
}
@synthesize lastModifiedUser;
- (BOOL) hasLastModifiedTime {
  return !!hasLastModifiedTime_;
}
- (void) setHasLastModifiedTime:(BOOL) value_ {
  hasLastModifiedTime_ = !!value_;
}
@synthesize lastModifiedTime;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) value_ {
  hasImageUrl_ = !!value_;
}
@synthesize imageUrl;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.lon = 0;
    self.lat = 0;
    self.type = @"";
    self.lastModifiedUser = @"";
    self.lastModifiedTime = 0;
    self.comment = @"";
    self.imageUrl = @"";
  }
  return self;
}
static Plakat* defaultPlakatInstance = nil;
+ (void) initialize {
  if (self == [Plakat class]) {
    defaultPlakatInstance = [[Plakat alloc] init];
  }
}
+ (Plakat*) defaultInstance {
  return defaultPlakatInstance;
}
- (Plakat*) defaultInstance {
  return defaultPlakatInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasLon) {
    return NO;
  }
  if (!self.hasLat) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasLon) {
    [output writeDouble:2 value:self.lon];
  }
  if (self.hasLat) {
    [output writeDouble:3 value:self.lat];
  }
  if (self.hasType) {
    [output writeString:4 value:self.type];
  }
  if (self.hasLastModifiedUser) {
    [output writeString:5 value:self.lastModifiedUser];
  }
  if (self.hasLastModifiedTime) {
    [output writeInt32:6 value:self.lastModifiedTime];
  }
  if (self.hasComment) {
    [output writeString:7 value:self.comment];
  }
  if (self.hasImageUrl) {
    [output writeString:8 value:self.imageUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasLon) {
    size_ += computeDoubleSize(2, self.lon);
  }
  if (self.hasLat) {
    size_ += computeDoubleSize(3, self.lat);
  }
  if (self.hasType) {
    size_ += computeStringSize(4, self.type);
  }
  if (self.hasLastModifiedUser) {
    size_ += computeStringSize(5, self.lastModifiedUser);
  }
  if (self.hasLastModifiedTime) {
    size_ += computeInt32Size(6, self.lastModifiedTime);
  }
  if (self.hasComment) {
    size_ += computeStringSize(7, self.comment);
  }
  if (self.hasImageUrl) {
    size_ += computeStringSize(8, self.imageUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Plakat*) parseFromData:(NSData*) data {
  return (Plakat*)[[[Plakat builder] mergeFromData:data] build];
}
+ (Plakat*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Plakat*)[[[Plakat builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Plakat*) parseFromInputStream:(NSInputStream*) input {
  return (Plakat*)[[[Plakat builder] mergeFromInputStream:input] build];
}
+ (Plakat*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Plakat*)[[[Plakat builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Plakat*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Plakat*)[[[Plakat builder] mergeFromCodedInputStream:input] build];
}
+ (Plakat*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Plakat*)[[[Plakat builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Plakat_Builder*) builder {
  return [[Plakat_Builder alloc] init];
}
+ (Plakat_Builder*) builderWithPrototype:(Plakat*) prototype {
  return [[Plakat builder] mergeFrom:prototype];
}
- (Plakat_Builder*) builder {
  return [Plakat builder];
}
- (Plakat_Builder*) toBuilder {
  return [Plakat builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasLon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lon", [NSNumber numberWithDouble:self.lon]];
  }
  if (self.hasLat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lat", [NSNumber numberWithDouble:self.lat]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasLastModifiedUser) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastModifiedUser", self.lastModifiedUser];
  }
  if (self.hasLastModifiedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastModifiedTime", [NSNumber numberWithInt:self.lastModifiedTime]];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", self.imageUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Plakat class]]) {
    return NO;
  }
  Plakat *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasLon == otherMessage.hasLon &&
      (!self.hasLon || self.lon == otherMessage.lon) &&
      self.hasLat == otherMessage.hasLat &&
      (!self.hasLat || self.lat == otherMessage.lat) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasLastModifiedUser == otherMessage.hasLastModifiedUser &&
      (!self.hasLastModifiedUser || [self.lastModifiedUser isEqual:otherMessage.lastModifiedUser]) &&
      self.hasLastModifiedTime == otherMessage.hasLastModifiedTime &&
      (!self.hasLastModifiedTime || self.lastModifiedTime == otherMessage.lastModifiedTime) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasImageUrl == otherMessage.hasImageUrl &&
      (!self.hasImageUrl || [self.imageUrl isEqual:otherMessage.imageUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasLon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lon] hash];
  }
  if (self.hasLat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lat] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasLastModifiedUser) {
    hashCode = hashCode * 31 + [self.lastModifiedUser hash];
  }
  if (self.hasLastModifiedTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.lastModifiedTime] hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasImageUrl) {
    hashCode = hashCode * 31 + [self.imageUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Plakat_Builder()
@property (strong) Plakat* result;
@end

@implementation Plakat_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Plakat alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Plakat_Builder*) clear {
  self.result = [[Plakat alloc] init];
  return self;
}
- (Plakat_Builder*) clone {
  return [Plakat builderWithPrototype:result];
}
- (Plakat*) defaultInstance {
  return [Plakat defaultInstance];
}
- (Plakat*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Plakat*) buildPartial {
  Plakat* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Plakat_Builder*) mergeFrom:(Plakat*) other {
  if (other == [Plakat defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasLon) {
    [self setLon:other.lon];
  }
  if (other.hasLat) {
    [self setLat:other.lat];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasLastModifiedUser) {
    [self setLastModifiedUser:other.lastModifiedUser];
  }
  if (other.hasLastModifiedTime) {
    [self setLastModifiedTime:other.lastModifiedTime];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Plakat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Plakat_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 17: {
        [self setLon:[input readDouble]];
        break;
      }
      case 25: {
        [self setLat:[input readDouble]];
        break;
      }
      case 34: {
        [self setType:[input readString]];
        break;
      }
      case 42: {
        [self setLastModifiedUser:[input readString]];
        break;
      }
      case 48: {
        [self setLastModifiedTime:[input readInt32]];
        break;
      }
      case 58: {
        [self setComment:[input readString]];
        break;
      }
      case 66: {
        [self setImageUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (Plakat_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Plakat_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasLon {
  return result.hasLon;
}
- (Float64) lon {
  return result.lon;
}
- (Plakat_Builder*) setLon:(Float64) value {
  result.hasLon = YES;
  result.lon = value;
  return self;
}
- (Plakat_Builder*) clearLon {
  result.hasLon = NO;
  result.lon = 0;
  return self;
}
- (BOOL) hasLat {
  return result.hasLat;
}
- (Float64) lat {
  return result.lat;
}
- (Plakat_Builder*) setLat:(Float64) value {
  result.hasLat = YES;
  result.lat = value;
  return self;
}
- (Plakat_Builder*) clearLat {
  result.hasLat = NO;
  result.lat = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (Plakat_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Plakat_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasLastModifiedUser {
  return result.hasLastModifiedUser;
}
- (NSString*) lastModifiedUser {
  return result.lastModifiedUser;
}
- (Plakat_Builder*) setLastModifiedUser:(NSString*) value {
  result.hasLastModifiedUser = YES;
  result.lastModifiedUser = value;
  return self;
}
- (Plakat_Builder*) clearLastModifiedUser {
  result.hasLastModifiedUser = NO;
  result.lastModifiedUser = @"";
  return self;
}
- (BOOL) hasLastModifiedTime {
  return result.hasLastModifiedTime;
}
- (int32_t) lastModifiedTime {
  return result.lastModifiedTime;
}
- (Plakat_Builder*) setLastModifiedTime:(int32_t) value {
  result.hasLastModifiedTime = YES;
  result.lastModifiedTime = value;
  return self;
}
- (Plakat_Builder*) clearLastModifiedTime {
  result.hasLastModifiedTime = NO;
  result.lastModifiedTime = 0;
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (Plakat_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (Plakat_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasImageUrl {
  return result.hasImageUrl;
}
- (NSString*) imageUrl {
  return result.imageUrl;
}
- (Plakat_Builder*) setImageUrl:(NSString*) value {
  result.hasImageUrl = YES;
  result.imageUrl = value;
  return self;
}
- (Plakat_Builder*) clearImageUrl {
  result.hasImageUrl = NO;
  result.imageUrl = @"";
  return self;
}
@end

@interface BoundingBox ()
@property Float64 north;
@property Float64 east;
@property Float64 south;
@property Float64 west;
@end

@implementation BoundingBox

- (BOOL) hasNorth {
  return !!hasNorth_;
}
- (void) setHasNorth:(BOOL) value_ {
  hasNorth_ = !!value_;
}
@synthesize north;
- (BOOL) hasEast {
  return !!hasEast_;
}
- (void) setHasEast:(BOOL) value_ {
  hasEast_ = !!value_;
}
@synthesize east;
- (BOOL) hasSouth {
  return !!hasSouth_;
}
- (void) setHasSouth:(BOOL) value_ {
  hasSouth_ = !!value_;
}
@synthesize south;
- (BOOL) hasWest {
  return !!hasWest_;
}
- (void) setHasWest:(BOOL) value_ {
  hasWest_ = !!value_;
}
@synthesize west;
- (id) init {
  if ((self = [super init])) {
    self.north = 0;
    self.east = 0;
    self.south = 0;
    self.west = 0;
  }
  return self;
}
static BoundingBox* defaultBoundingBoxInstance = nil;
+ (void) initialize {
  if (self == [BoundingBox class]) {
    defaultBoundingBoxInstance = [[BoundingBox alloc] init];
  }
}
+ (BoundingBox*) defaultInstance {
  return defaultBoundingBoxInstance;
}
- (BoundingBox*) defaultInstance {
  return defaultBoundingBoxInstance;
}
- (BOOL) isInitialized {
  if (!self.hasNorth) {
    return NO;
  }
  if (!self.hasEast) {
    return NO;
  }
  if (!self.hasSouth) {
    return NO;
  }
  if (!self.hasWest) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasNorth) {
    [output writeDouble:1 value:self.north];
  }
  if (self.hasEast) {
    [output writeDouble:2 value:self.east];
  }
  if (self.hasSouth) {
    [output writeDouble:3 value:self.south];
  }
  if (self.hasWest) {
    [output writeDouble:4 value:self.west];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasNorth) {
    size_ += computeDoubleSize(1, self.north);
  }
  if (self.hasEast) {
    size_ += computeDoubleSize(2, self.east);
  }
  if (self.hasSouth) {
    size_ += computeDoubleSize(3, self.south);
  }
  if (self.hasWest) {
    size_ += computeDoubleSize(4, self.west);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BoundingBox*) parseFromData:(NSData*) data {
  return (BoundingBox*)[[[BoundingBox builder] mergeFromData:data] build];
}
+ (BoundingBox*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoundingBox*)[[[BoundingBox builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BoundingBox*) parseFromInputStream:(NSInputStream*) input {
  return (BoundingBox*)[[[BoundingBox builder] mergeFromInputStream:input] build];
}
+ (BoundingBox*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoundingBox*)[[[BoundingBox builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoundingBox*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BoundingBox*)[[[BoundingBox builder] mergeFromCodedInputStream:input] build];
}
+ (BoundingBox*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoundingBox*)[[[BoundingBox builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoundingBox_Builder*) builder {
  return [[BoundingBox_Builder alloc] init];
}
+ (BoundingBox_Builder*) builderWithPrototype:(BoundingBox*) prototype {
  return [[BoundingBox builder] mergeFrom:prototype];
}
- (BoundingBox_Builder*) builder {
  return [BoundingBox builder];
}
- (BoundingBox_Builder*) toBuilder {
  return [BoundingBox builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasNorth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"north", [NSNumber numberWithDouble:self.north]];
  }
  if (self.hasEast) {
    [output appendFormat:@"%@%@: %@\n", indent, @"east", [NSNumber numberWithDouble:self.east]];
  }
  if (self.hasSouth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"south", [NSNumber numberWithDouble:self.south]];
  }
  if (self.hasWest) {
    [output appendFormat:@"%@%@: %@\n", indent, @"west", [NSNumber numberWithDouble:self.west]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BoundingBox class]]) {
    return NO;
  }
  BoundingBox *otherMessage = other;
  return
      self.hasNorth == otherMessage.hasNorth &&
      (!self.hasNorth || self.north == otherMessage.north) &&
      self.hasEast == otherMessage.hasEast &&
      (!self.hasEast || self.east == otherMessage.east) &&
      self.hasSouth == otherMessage.hasSouth &&
      (!self.hasSouth || self.south == otherMessage.south) &&
      self.hasWest == otherMessage.hasWest &&
      (!self.hasWest || self.west == otherMessage.west) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasNorth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.north] hash];
  }
  if (self.hasEast) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.east] hash];
  }
  if (self.hasSouth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.south] hash];
  }
  if (self.hasWest) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.west] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BoundingBox_Builder()
@property (strong) BoundingBox* result;
@end

@implementation BoundingBox_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BoundingBox alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BoundingBox_Builder*) clear {
  self.result = [[BoundingBox alloc] init];
  return self;
}
- (BoundingBox_Builder*) clone {
  return [BoundingBox builderWithPrototype:result];
}
- (BoundingBox*) defaultInstance {
  return [BoundingBox defaultInstance];
}
- (BoundingBox*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BoundingBox*) buildPartial {
  BoundingBox* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BoundingBox_Builder*) mergeFrom:(BoundingBox*) other {
  if (other == [BoundingBox defaultInstance]) {
    return self;
  }
  if (other.hasNorth) {
    [self setNorth:other.north];
  }
  if (other.hasEast) {
    [self setEast:other.east];
  }
  if (other.hasSouth) {
    [self setSouth:other.south];
  }
  if (other.hasWest) {
    [self setWest:other.west];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BoundingBox_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BoundingBox_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setNorth:[input readDouble]];
        break;
      }
      case 17: {
        [self setEast:[input readDouble]];
        break;
      }
      case 25: {
        [self setSouth:[input readDouble]];
        break;
      }
      case 33: {
        [self setWest:[input readDouble]];
        break;
      }
    }
  }
}
- (BOOL) hasNorth {
  return result.hasNorth;
}
- (Float64) north {
  return result.north;
}
- (BoundingBox_Builder*) setNorth:(Float64) value {
  result.hasNorth = YES;
  result.north = value;
  return self;
}
- (BoundingBox_Builder*) clearNorth {
  result.hasNorth = NO;
  result.north = 0;
  return self;
}
- (BOOL) hasEast {
  return result.hasEast;
}
- (Float64) east {
  return result.east;
}
- (BoundingBox_Builder*) setEast:(Float64) value {
  result.hasEast = YES;
  result.east = value;
  return self;
}
- (BoundingBox_Builder*) clearEast {
  result.hasEast = NO;
  result.east = 0;
  return self;
}
- (BOOL) hasSouth {
  return result.hasSouth;
}
- (Float64) south {
  return result.south;
}
- (BoundingBox_Builder*) setSouth:(Float64) value {
  result.hasSouth = YES;
  result.south = value;
  return self;
}
- (BoundingBox_Builder*) clearSouth {
  result.hasSouth = NO;
  result.south = 0;
  return self;
}
- (BOOL) hasWest {
  return result.hasWest;
}
- (Float64) west {
  return result.west;
}
- (BoundingBox_Builder*) setWest:(Float64) value {
  result.hasWest = YES;
  result.west = value;
  return self;
}
- (BoundingBox_Builder*) clearWest {
  result.hasWest = NO;
  result.west = 0;
  return self;
}
@end

@interface ViewRequest ()
@property (strong) NSString* filterType;
@property (strong) BoundingBox* viewBox;
@end

@implementation ViewRequest

- (BOOL) hasFilterType {
  return !!hasFilterType_;
}
- (void) setHasFilterType:(BOOL) value_ {
  hasFilterType_ = !!value_;
}
@synthesize filterType;
- (BOOL) hasViewBox {
  return !!hasViewBox_;
}
- (void) setHasViewBox:(BOOL) value_ {
  hasViewBox_ = !!value_;
}
@synthesize viewBox;
- (id) init {
  if ((self = [super init])) {
    self.filterType = @"";
    self.viewBox = [BoundingBox defaultInstance];
  }
  return self;
}
static ViewRequest* defaultViewRequestInstance = nil;
+ (void) initialize {
  if (self == [ViewRequest class]) {
    defaultViewRequestInstance = [[ViewRequest alloc] init];
  }
}
+ (ViewRequest*) defaultInstance {
  return defaultViewRequestInstance;
}
- (ViewRequest*) defaultInstance {
  return defaultViewRequestInstance;
}
- (BOOL) isInitialized {
  if (self.hasViewBox) {
    if (!self.viewBox.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFilterType) {
    [output writeString:1 value:self.filterType];
  }
  if (self.hasViewBox) {
    [output writeMessage:2 value:self.viewBox];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFilterType) {
    size_ += computeStringSize(1, self.filterType);
  }
  if (self.hasViewBox) {
    size_ += computeMessageSize(2, self.viewBox);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ViewRequest*) parseFromData:(NSData*) data {
  return (ViewRequest*)[[[ViewRequest builder] mergeFromData:data] build];
}
+ (ViewRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewRequest*)[[[ViewRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ViewRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ViewRequest*)[[[ViewRequest builder] mergeFromInputStream:input] build];
}
+ (ViewRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewRequest*)[[[ViewRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ViewRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ViewRequest*)[[[ViewRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ViewRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ViewRequest*)[[[ViewRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ViewRequest_Builder*) builder {
  return [[ViewRequest_Builder alloc] init];
}
+ (ViewRequest_Builder*) builderWithPrototype:(ViewRequest*) prototype {
  return [[ViewRequest builder] mergeFrom:prototype];
}
- (ViewRequest_Builder*) builder {
  return [ViewRequest builder];
}
- (ViewRequest_Builder*) toBuilder {
  return [ViewRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFilterType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"filterType", self.filterType];
  }
  if (self.hasViewBox) {
    [output appendFormat:@"%@%@ {\n", indent, @"viewBox"];
    [self.viewBox writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ViewRequest class]]) {
    return NO;
  }
  ViewRequest *otherMessage = other;
  return
      self.hasFilterType == otherMessage.hasFilterType &&
      (!self.hasFilterType || [self.filterType isEqual:otherMessage.filterType]) &&
      self.hasViewBox == otherMessage.hasViewBox &&
      (!self.hasViewBox || [self.viewBox isEqual:otherMessage.viewBox]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasFilterType) {
    hashCode = hashCode * 31 + [self.filterType hash];
  }
  if (self.hasViewBox) {
    hashCode = hashCode * 31 + [self.viewBox hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ViewRequest_Builder()
@property (strong) ViewRequest* result;
@end

@implementation ViewRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ViewRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ViewRequest_Builder*) clear {
  self.result = [[ViewRequest alloc] init];
  return self;
}
- (ViewRequest_Builder*) clone {
  return [ViewRequest builderWithPrototype:result];
}
- (ViewRequest*) defaultInstance {
  return [ViewRequest defaultInstance];
}
- (ViewRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ViewRequest*) buildPartial {
  ViewRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ViewRequest_Builder*) mergeFrom:(ViewRequest*) other {
  if (other == [ViewRequest defaultInstance]) {
    return self;
  }
  if (other.hasFilterType) {
    [self setFilterType:other.filterType];
  }
  if (other.hasViewBox) {
    [self mergeViewBox:other.viewBox];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ViewRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ViewRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFilterType:[input readString]];
        break;
      }
      case 18: {
        BoundingBox_Builder* subBuilder = [BoundingBox builder];
        if (self.hasViewBox) {
          [subBuilder mergeFrom:self.viewBox];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setViewBox:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasFilterType {
  return result.hasFilterType;
}
- (NSString*) filterType {
  return result.filterType;
}
- (ViewRequest_Builder*) setFilterType:(NSString*) value {
  result.hasFilterType = YES;
  result.filterType = value;
  return self;
}
- (ViewRequest_Builder*) clearFilterType {
  result.hasFilterType = NO;
  result.filterType = @"";
  return self;
}
- (BOOL) hasViewBox {
  return result.hasViewBox;
}
- (BoundingBox*) viewBox {
  return result.viewBox;
}
- (ViewRequest_Builder*) setViewBox:(BoundingBox*) value {
  result.hasViewBox = YES;
  result.viewBox = value;
  return self;
}
- (ViewRequest_Builder*) setViewBoxBuilder:(BoundingBox_Builder*) builderForValue {
  return [self setViewBox:[builderForValue build]];
}
- (ViewRequest_Builder*) mergeViewBox:(BoundingBox*) value {
  if (result.hasViewBox &&
      result.viewBox != [BoundingBox defaultInstance]) {
    result.viewBox =
      [[[BoundingBox builderWithPrototype:result.viewBox] mergeFrom:value] buildPartial];
  } else {
    result.viewBox = value;
  }
  result.hasViewBox = YES;
  return self;
}
- (ViewRequest_Builder*) clearViewBox {
  result.hasViewBox = NO;
  result.viewBox = [BoundingBox defaultInstance];
  return self;
}
@end

@interface ChangeRequest ()
@property int32_t id;
@property (strong) NSString* type;
@property (strong) NSString* comment;
@property (strong) NSString* imageUrl;
@end

@implementation ChangeRequest

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) value_ {
  hasImageUrl_ = !!value_;
}
@synthesize imageUrl;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
    self.type = @"";
    self.comment = @"";
    self.imageUrl = @"";
  }
  return self;
}
static ChangeRequest* defaultChangeRequestInstance = nil;
+ (void) initialize {
  if (self == [ChangeRequest class]) {
    defaultChangeRequestInstance = [[ChangeRequest alloc] init];
  }
}
+ (ChangeRequest*) defaultInstance {
  return defaultChangeRequestInstance;
}
- (ChangeRequest*) defaultInstance {
  return defaultChangeRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  if (self.hasComment) {
    [output writeString:3 value:self.comment];
  }
  if (self.hasImageUrl) {
    [output writeString:4 value:self.imageUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  if (self.hasType) {
    size_ += computeStringSize(2, self.type);
  }
  if (self.hasComment) {
    size_ += computeStringSize(3, self.comment);
  }
  if (self.hasImageUrl) {
    size_ += computeStringSize(4, self.imageUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ChangeRequest*) parseFromData:(NSData*) data {
  return (ChangeRequest*)[[[ChangeRequest builder] mergeFromData:data] build];
}
+ (ChangeRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeRequest*)[[[ChangeRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ChangeRequest*) parseFromInputStream:(NSInputStream*) input {
  return (ChangeRequest*)[[[ChangeRequest builder] mergeFromInputStream:input] build];
}
+ (ChangeRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeRequest*)[[[ChangeRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ChangeRequest*)[[[ChangeRequest builder] mergeFromCodedInputStream:input] build];
}
+ (ChangeRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ChangeRequest*)[[[ChangeRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ChangeRequest_Builder*) builder {
  return [[ChangeRequest_Builder alloc] init];
}
+ (ChangeRequest_Builder*) builderWithPrototype:(ChangeRequest*) prototype {
  return [[ChangeRequest builder] mergeFrom:prototype];
}
- (ChangeRequest_Builder*) builder {
  return [ChangeRequest builder];
}
- (ChangeRequest_Builder*) toBuilder {
  return [ChangeRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", self.imageUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ChangeRequest class]]) {
    return NO;
  }
  ChangeRequest *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasImageUrl == otherMessage.hasImageUrl &&
      (!self.hasImageUrl || [self.imageUrl isEqual:otherMessage.imageUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasImageUrl) {
    hashCode = hashCode * 31 + [self.imageUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ChangeRequest_Builder()
@property (strong) ChangeRequest* result;
@end

@implementation ChangeRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ChangeRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ChangeRequest_Builder*) clear {
  self.result = [[ChangeRequest alloc] init];
  return self;
}
- (ChangeRequest_Builder*) clone {
  return [ChangeRequest builderWithPrototype:result];
}
- (ChangeRequest*) defaultInstance {
  return [ChangeRequest defaultInstance];
}
- (ChangeRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ChangeRequest*) buildPartial {
  ChangeRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ChangeRequest_Builder*) mergeFrom:(ChangeRequest*) other {
  if (other == [ChangeRequest defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ChangeRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ChangeRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
      case 26: {
        [self setComment:[input readString]];
        break;
      }
      case 34: {
        [self setImageUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (ChangeRequest_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (ChangeRequest_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (ChangeRequest_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (ChangeRequest_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (ChangeRequest_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (ChangeRequest_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasImageUrl {
  return result.hasImageUrl;
}
- (NSString*) imageUrl {
  return result.imageUrl;
}
- (ChangeRequest_Builder*) setImageUrl:(NSString*) value {
  result.hasImageUrl = YES;
  result.imageUrl = value;
  return self;
}
- (ChangeRequest_Builder*) clearImageUrl {
  result.hasImageUrl = NO;
  result.imageUrl = @"";
  return self;
}
@end

@interface DeleteRequest ()
@property int32_t id;
@end

@implementation DeleteRequest

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value_ {
  hasId_ = !!value_;
}
@synthesize id;
- (id) init {
  if ((self = [super init])) {
    self.id = 0;
  }
  return self;
}
static DeleteRequest* defaultDeleteRequestInstance = nil;
+ (void) initialize {
  if (self == [DeleteRequest class]) {
    defaultDeleteRequestInstance = [[DeleteRequest alloc] init];
  }
}
+ (DeleteRequest*) defaultInstance {
  return defaultDeleteRequestInstance;
}
- (DeleteRequest*) defaultInstance {
  return defaultDeleteRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeInt32:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeInt32Size(1, self.id);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeleteRequest*) parseFromData:(NSData*) data {
  return (DeleteRequest*)[[[DeleteRequest builder] mergeFromData:data] build];
}
+ (DeleteRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeleteRequest*)[[[DeleteRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DeleteRequest*) parseFromInputStream:(NSInputStream*) input {
  return (DeleteRequest*)[[[DeleteRequest builder] mergeFromInputStream:input] build];
}
+ (DeleteRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeleteRequest*)[[[DeleteRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeleteRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DeleteRequest*)[[[DeleteRequest builder] mergeFromCodedInputStream:input] build];
}
+ (DeleteRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DeleteRequest*)[[[DeleteRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DeleteRequest_Builder*) builder {
  return [[DeleteRequest_Builder alloc] init];
}
+ (DeleteRequest_Builder*) builderWithPrototype:(DeleteRequest*) prototype {
  return [[DeleteRequest builder] mergeFrom:prototype];
}
- (DeleteRequest_Builder*) builder {
  return [DeleteRequest builder];
}
- (DeleteRequest_Builder*) toBuilder {
  return [DeleteRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", [NSNumber numberWithInt:self.id]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DeleteRequest class]]) {
    return NO;
  }
  DeleteRequest *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || self.id == otherMessage.id) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.id] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DeleteRequest_Builder()
@property (strong) DeleteRequest* result;
@end

@implementation DeleteRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[DeleteRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DeleteRequest_Builder*) clear {
  self.result = [[DeleteRequest alloc] init];
  return self;
}
- (DeleteRequest_Builder*) clone {
  return [DeleteRequest builderWithPrototype:result];
}
- (DeleteRequest*) defaultInstance {
  return [DeleteRequest defaultInstance];
}
- (DeleteRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DeleteRequest*) buildPartial {
  DeleteRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (DeleteRequest_Builder*) mergeFrom:(DeleteRequest*) other {
  if (other == [DeleteRequest defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DeleteRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DeleteRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (int32_t) id {
  return result.id;
}
- (DeleteRequest_Builder*) setId:(int32_t) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (DeleteRequest_Builder*) clearId {
  result.hasId = NO;
  result.id = 0;
  return self;
}
@end

@interface AddRequest ()
@property Float64 lon;
@property Float64 lat;
@property (strong) NSString* type;
@property (strong) NSString* comment;
@property (strong) NSString* imageUrl;
@end

@implementation AddRequest

- (BOOL) hasLon {
  return !!hasLon_;
}
- (void) setHasLon:(BOOL) value_ {
  hasLon_ = !!value_;
}
@synthesize lon;
- (BOOL) hasLat {
  return !!hasLat_;
}
- (void) setHasLat:(BOOL) value_ {
  hasLat_ = !!value_;
}
@synthesize lat;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasComment {
  return !!hasComment_;
}
- (void) setHasComment:(BOOL) value_ {
  hasComment_ = !!value_;
}
@synthesize comment;
- (BOOL) hasImageUrl {
  return !!hasImageUrl_;
}
- (void) setHasImageUrl:(BOOL) value_ {
  hasImageUrl_ = !!value_;
}
@synthesize imageUrl;
- (id) init {
  if ((self = [super init])) {
    self.lon = 0;
    self.lat = 0;
    self.type = @"";
    self.comment = @"";
    self.imageUrl = @"";
  }
  return self;
}
static AddRequest* defaultAddRequestInstance = nil;
+ (void) initialize {
  if (self == [AddRequest class]) {
    defaultAddRequestInstance = [[AddRequest alloc] init];
  }
}
+ (AddRequest*) defaultInstance {
  return defaultAddRequestInstance;
}
- (AddRequest*) defaultInstance {
  return defaultAddRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLon) {
    return NO;
  }
  if (!self.hasLat) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLon) {
    [output writeDouble:1 value:self.lon];
  }
  if (self.hasLat) {
    [output writeDouble:2 value:self.lat];
  }
  if (self.hasType) {
    [output writeString:3 value:self.type];
  }
  if (self.hasComment) {
    [output writeString:4 value:self.comment];
  }
  if (self.hasImageUrl) {
    [output writeString:5 value:self.imageUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLon) {
    size_ += computeDoubleSize(1, self.lon);
  }
  if (self.hasLat) {
    size_ += computeDoubleSize(2, self.lat);
  }
  if (self.hasType) {
    size_ += computeStringSize(3, self.type);
  }
  if (self.hasComment) {
    size_ += computeStringSize(4, self.comment);
  }
  if (self.hasImageUrl) {
    size_ += computeStringSize(5, self.imageUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AddRequest*) parseFromData:(NSData*) data {
  return (AddRequest*)[[[AddRequest builder] mergeFromData:data] build];
}
+ (AddRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AddRequest*)[[[AddRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AddRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AddRequest*)[[[AddRequest builder] mergeFromInputStream:input] build];
}
+ (AddRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AddRequest*)[[[AddRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AddRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AddRequest*)[[[AddRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AddRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AddRequest*)[[[AddRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AddRequest_Builder*) builder {
  return [[AddRequest_Builder alloc] init];
}
+ (AddRequest_Builder*) builderWithPrototype:(AddRequest*) prototype {
  return [[AddRequest builder] mergeFrom:prototype];
}
- (AddRequest_Builder*) builder {
  return [AddRequest builder];
}
- (AddRequest_Builder*) toBuilder {
  return [AddRequest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lon", [NSNumber numberWithDouble:self.lon]];
  }
  if (self.hasLat) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lat", [NSNumber numberWithDouble:self.lat]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasComment) {
    [output appendFormat:@"%@%@: %@\n", indent, @"comment", self.comment];
  }
  if (self.hasImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", self.imageUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AddRequest class]]) {
    return NO;
  }
  AddRequest *otherMessage = other;
  return
      self.hasLon == otherMessage.hasLon &&
      (!self.hasLon || self.lon == otherMessage.lon) &&
      self.hasLat == otherMessage.hasLat &&
      (!self.hasLat || self.lat == otherMessage.lat) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasComment == otherMessage.hasComment &&
      (!self.hasComment || [self.comment isEqual:otherMessage.comment]) &&
      self.hasImageUrl == otherMessage.hasImageUrl &&
      (!self.hasImageUrl || [self.imageUrl isEqual:otherMessage.imageUrl]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasLon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lon] hash];
  }
  if (self.hasLat) {
    hashCode = hashCode * 31 + [[NSNumber numberWithDouble:self.lat] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasComment) {
    hashCode = hashCode * 31 + [self.comment hash];
  }
  if (self.hasImageUrl) {
    hashCode = hashCode * 31 + [self.imageUrl hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AddRequest_Builder()
@property (strong) AddRequest* result;
@end

@implementation AddRequest_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[AddRequest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AddRequest_Builder*) clear {
  self.result = [[AddRequest alloc] init];
  return self;
}
- (AddRequest_Builder*) clone {
  return [AddRequest builderWithPrototype:result];
}
- (AddRequest*) defaultInstance {
  return [AddRequest defaultInstance];
}
- (AddRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AddRequest*) buildPartial {
  AddRequest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (AddRequest_Builder*) mergeFrom:(AddRequest*) other {
  if (other == [AddRequest defaultInstance]) {
    return self;
  }
  if (other.hasLon) {
    [self setLon:other.lon];
  }
  if (other.hasLat) {
    [self setLat:other.lat];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasComment) {
    [self setComment:other.comment];
  }
  if (other.hasImageUrl) {
    [self setImageUrl:other.imageUrl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AddRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AddRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 9: {
        [self setLon:[input readDouble]];
        break;
      }
      case 17: {
        [self setLat:[input readDouble]];
        break;
      }
      case 26: {
        [self setType:[input readString]];
        break;
      }
      case 34: {
        [self setComment:[input readString]];
        break;
      }
      case 42: {
        [self setImageUrl:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLon {
  return result.hasLon;
}
- (Float64) lon {
  return result.lon;
}
- (AddRequest_Builder*) setLon:(Float64) value {
  result.hasLon = YES;
  result.lon = value;
  return self;
}
- (AddRequest_Builder*) clearLon {
  result.hasLon = NO;
  result.lon = 0;
  return self;
}
- (BOOL) hasLat {
  return result.hasLat;
}
- (Float64) lat {
  return result.lat;
}
- (AddRequest_Builder*) setLat:(Float64) value {
  result.hasLat = YES;
  result.lat = value;
  return self;
}
- (AddRequest_Builder*) clearLat {
  result.hasLat = NO;
  result.lat = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (AddRequest_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (AddRequest_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasComment {
  return result.hasComment;
}
- (NSString*) comment {
  return result.comment;
}
- (AddRequest_Builder*) setComment:(NSString*) value {
  result.hasComment = YES;
  result.comment = value;
  return self;
}
- (AddRequest_Builder*) clearComment {
  result.hasComment = NO;
  result.comment = @"";
  return self;
}
- (BOOL) hasImageUrl {
  return result.hasImageUrl;
}
- (NSString*) imageUrl {
  return result.imageUrl;
}
- (AddRequest_Builder*) setImageUrl:(NSString*) value {
  result.hasImageUrl = YES;
  result.imageUrl = value;
  return self;
}
- (AddRequest_Builder*) clearImageUrl {
  result.hasImageUrl = NO;
  result.imageUrl = @"";
  return self;
}
@end

@interface Request ()
@property (strong) NSString* username;
@property (strong) NSString* password;
@property (strong) ViewRequest* viewRequest;
@property (strong) NSMutableArray * addArray;
@property (strong) NSMutableArray * changeArray;
@property (strong) NSMutableArray * deleteArray;
@end

@implementation Request

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value_ {
  hasUsername_ = !!value_;
}
@synthesize username;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value_ {
  hasPassword_ = !!value_;
}
@synthesize password;
- (BOOL) hasViewRequest {
  return !!hasViewRequest_;
}
- (void) setHasViewRequest:(BOOL) value_ {
  hasViewRequest_ = !!value_;
}
@synthesize viewRequest;
@synthesize addArray;
@dynamic add;
@synthesize changeArray;
@dynamic change;
@synthesize deleteArray;
@dynamic delete;
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.password = @"";
    self.viewRequest = [ViewRequest defaultInstance];
  }
  return self;
}
static Request* defaultRequestInstance = nil;
+ (void) initialize {
  if (self == [Request class]) {
    defaultRequestInstance = [[Request alloc] init];
  }
}
+ (Request*) defaultInstance {
  return defaultRequestInstance;
}
- (Request*) defaultInstance {
  return defaultRequestInstance;
}
- (NSArray *)add {
  return addArray;
}
- (AddRequest*)addAtIndex:(NSUInteger)index {
  return [addArray objectAtIndex:index];
}
- (NSArray *)change {
  return changeArray;
}
- (ChangeRequest*)changeAtIndex:(NSUInteger)index {
  return [changeArray objectAtIndex:index];
}
- (NSArray *)delete {
  return deleteArray;
}
- (DeleteRequest*)deleteAtIndex:(NSUInteger)index {
  return [deleteArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUsername) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  if (self.hasViewRequest) {
    if (!self.viewRequest.isInitialized) {
      return NO;
    }
  }
  for (AddRequest* element in self.add) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (ChangeRequest* element in self.change) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  for (DeleteRequest* element in self.delete) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  if (self.hasViewRequest) {
    [output writeMessage:3 value:self.viewRequest];
  }
  for (AddRequest *element in self.addArray) {
    [output writeMessage:4 value:element];
  }
  for (ChangeRequest *element in self.changeArray) {
    [output writeMessage:5 value:element];
  }
  for (DeleteRequest *element in self.deleteArray) {
    [output writeMessage:6 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUsername) {
    size_ += computeStringSize(1, self.username);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(2, self.password);
  }
  if (self.hasViewRequest) {
    size_ += computeMessageSize(3, self.viewRequest);
  }
  for (AddRequest *element in self.addArray) {
    size_ += computeMessageSize(4, element);
  }
  for (ChangeRequest *element in self.changeArray) {
    size_ += computeMessageSize(5, element);
  }
  for (DeleteRequest *element in self.deleteArray) {
    size_ += computeMessageSize(6, element);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Request*) parseFromData:(NSData*) data {
  return (Request*)[[[Request builder] mergeFromData:data] build];
}
+ (Request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input {
  return (Request*)[[[Request builder] mergeFromInputStream:input] build];
}
+ (Request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input] build];
}
+ (Request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Request*)[[[Request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Request_Builder*) builder {
  return [[Request_Builder alloc] init];
}
+ (Request_Builder*) builderWithPrototype:(Request*) prototype {
  return [[Request builder] mergeFrom:prototype];
}
- (Request_Builder*) builder {
  return [Request builder];
}
- (Request_Builder*) toBuilder {
  return [Request builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasViewRequest) {
    [output appendFormat:@"%@%@ {\n", indent, @"viewRequest"];
    [self.viewRequest writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (AddRequest* element in self.addArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"add"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (ChangeRequest* element in self.changeArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"change"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  for (DeleteRequest* element in self.deleteArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"delete"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Request class]]) {
    return NO;
  }
  Request *otherMessage = other;
  return
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasViewRequest == otherMessage.hasViewRequest &&
      (!self.hasViewRequest || [self.viewRequest isEqual:otherMessage.viewRequest]) &&
      [self.addArray isEqualToArray:otherMessage.addArray] &&
      [self.changeArray isEqualToArray:otherMessage.changeArray] &&
      [self.deleteArray isEqualToArray:otherMessage.deleteArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasViewRequest) {
    hashCode = hashCode * 31 + [self.viewRequest hash];
  }
  for (AddRequest* element in self.addArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (ChangeRequest* element in self.changeArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  for (DeleteRequest* element in self.deleteArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Request_Builder()
@property (strong) Request* result;
@end

@implementation Request_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Request alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Request_Builder*) clear {
  self.result = [[Request alloc] init];
  return self;
}
- (Request_Builder*) clone {
  return [Request builderWithPrototype:result];
}
- (Request*) defaultInstance {
  return [Request defaultInstance];
}
- (Request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Request*) buildPartial {
  Request* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Request_Builder*) mergeFrom:(Request*) other {
  if (other == [Request defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasViewRequest) {
    [self mergeViewRequest:other.viewRequest];
  }
  if (other.addArray.count > 0) {
    if (result.addArray == nil) {
      result.addArray = [[NSMutableArray alloc] initWithArray:other.addArray];
    } else {
      [result.addArray addObjectsFromArray:other.addArray];
    }
  }
  if (other.changeArray.count > 0) {
    if (result.changeArray == nil) {
      result.changeArray = [[NSMutableArray alloc] initWithArray:other.changeArray];
    } else {
      [result.changeArray addObjectsFromArray:other.changeArray];
    }
  }
  if (other.deleteArray.count > 0) {
    if (result.deleteArray == nil) {
      result.deleteArray = [[NSMutableArray alloc] initWithArray:other.deleteArray];
    } else {
      [result.deleteArray addObjectsFromArray:other.deleteArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Request_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Request_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 26: {
        ViewRequest_Builder* subBuilder = [ViewRequest builder];
        if (self.hasViewRequest) {
          [subBuilder mergeFrom:self.viewRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setViewRequest:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        AddRequest_Builder* subBuilder = [AddRequest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAdd:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        ChangeRequest_Builder* subBuilder = [ChangeRequest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addChange:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        DeleteRequest_Builder* subBuilder = [DeleteRequest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDelete:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (Request_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (Request_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (Request_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (Request_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasViewRequest {
  return result.hasViewRequest;
}
- (ViewRequest*) viewRequest {
  return result.viewRequest;
}
- (Request_Builder*) setViewRequest:(ViewRequest*) value {
  result.hasViewRequest = YES;
  result.viewRequest = value;
  return self;
}
- (Request_Builder*) setViewRequestBuilder:(ViewRequest_Builder*) builderForValue {
  return [self setViewRequest:[builderForValue build]];
}
- (Request_Builder*) mergeViewRequest:(ViewRequest*) value {
  if (result.hasViewRequest &&
      result.viewRequest != [ViewRequest defaultInstance]) {
    result.viewRequest =
      [[[ViewRequest builderWithPrototype:result.viewRequest] mergeFrom:value] buildPartial];
  } else {
    result.viewRequest = value;
  }
  result.hasViewRequest = YES;
  return self;
}
- (Request_Builder*) clearViewRequest {
  result.hasViewRequest = NO;
  result.viewRequest = [ViewRequest defaultInstance];
  return self;
}
- (NSMutableArray *)add {
  return result.addArray;
}
- (AddRequest*)addAtIndex:(NSUInteger)index {
  return [result addAtIndex:index];
}
- (Request_Builder *)addAdd:(AddRequest*)value {
  if (result.addArray == nil) {
    result.addArray = [[NSMutableArray alloc]init];
  }
  [result.addArray addObject:value];
  return self;
}
- (Request_Builder *)setAddArray:(NSArray *)array {
  result.addArray = [[NSMutableArray alloc]init];
  return self;
}
- (Request_Builder *)clearAdd {
  result.addArray = nil;
  return self;
}
- (NSMutableArray *)change {
  return result.changeArray;
}
- (ChangeRequest*)changeAtIndex:(NSUInteger)index {
  return [result changeAtIndex:index];
}
- (Request_Builder *)addChange:(ChangeRequest*)value {
  if (result.changeArray == nil) {
    result.changeArray = [[NSMutableArray alloc]init];
  }
  [result.changeArray addObject:value];
  return self;
}
- (Request_Builder *)setChangeArray:(NSArray *)array {
  result.changeArray = [[NSMutableArray alloc]init];
  return self;
}
- (Request_Builder *)clearChange {
  result.changeArray = nil;
  return self;
}
- (NSMutableArray *)delete {
  return result.deleteArray;
}
- (DeleteRequest*)deleteAtIndex:(NSUInteger)index {
  return [result deleteAtIndex:index];
}
- (Request_Builder *)addDelete:(DeleteRequest*)value {
  if (result.deleteArray == nil) {
    result.deleteArray = [[NSMutableArray alloc]init];
  }
  [result.deleteArray addObject:value];
  return self;
}
- (Request_Builder *)setDeleteArray:(NSArray *)array {
  result.deleteArray = [[NSMutableArray alloc]init];
  return self;
}
- (Request_Builder *)clearDelete {
  result.deleteArray = nil;
  return self;
}
@end

@interface Response ()
@property (strong) NSMutableArray * plakateArray;
@property int32_t addedCount;
@property int32_t changedCount;
@property int32_t deletedCount;
@end

@implementation Response

@synthesize plakateArray;
@dynamic plakate;
- (BOOL) hasAddedCount {
  return !!hasAddedCount_;
}
- (void) setHasAddedCount:(BOOL) value_ {
  hasAddedCount_ = !!value_;
}
@synthesize addedCount;
- (BOOL) hasChangedCount {
  return !!hasChangedCount_;
}
- (void) setHasChangedCount:(BOOL) value_ {
  hasChangedCount_ = !!value_;
}
@synthesize changedCount;
- (BOOL) hasDeletedCount {
  return !!hasDeletedCount_;
}
- (void) setHasDeletedCount:(BOOL) value_ {
  hasDeletedCount_ = !!value_;
}
@synthesize deletedCount;
- (id) init {
  if ((self = [super init])) {
    self.addedCount = 0;
    self.changedCount = 0;
    self.deletedCount = 0;
  }
  return self;
}
static Response* defaultResponseInstance = nil;
+ (void) initialize {
  if (self == [Response class]) {
    defaultResponseInstance = [[Response alloc] init];
  }
}
+ (Response*) defaultInstance {
  return defaultResponseInstance;
}
- (Response*) defaultInstance {
  return defaultResponseInstance;
}
- (NSArray *)plakate {
  return plakateArray;
}
- (Plakat*)plakateAtIndex:(NSUInteger)index {
  return [plakateArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  for (Plakat* element in self.plakate) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Plakat *element in self.plakateArray) {
    [output writeMessage:1 value:element];
  }
  if (self.hasAddedCount) {
    [output writeInt32:2 value:self.addedCount];
  }
  if (self.hasChangedCount) {
    [output writeInt32:3 value:self.changedCount];
  }
  if (self.hasDeletedCount) {
    [output writeInt32:4 value:self.deletedCount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  for (Plakat *element in self.plakateArray) {
    size_ += computeMessageSize(1, element);
  }
  if (self.hasAddedCount) {
    size_ += computeInt32Size(2, self.addedCount);
  }
  if (self.hasChangedCount) {
    size_ += computeInt32Size(3, self.changedCount);
  }
  if (self.hasDeletedCount) {
    size_ += computeInt32Size(4, self.deletedCount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Response*) parseFromData:(NSData*) data {
  return (Response*)[[[Response builder] mergeFromData:data] build];
}
+ (Response*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input {
  return (Response*)[[[Response builder] mergeFromInputStream:input] build];
}
+ (Response*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input] build];
}
+ (Response*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Response*)[[[Response builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Response_Builder*) builder {
  return [[Response_Builder alloc] init];
}
+ (Response_Builder*) builderWithPrototype:(Response*) prototype {
  return [[Response builder] mergeFrom:prototype];
}
- (Response_Builder*) builder {
  return [Response builder];
}
- (Response_Builder*) toBuilder {
  return [Response builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  for (Plakat* element in self.plakateArray) {
    [output appendFormat:@"%@%@ {\n", indent, @"plakate"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAddedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addedCount", [NSNumber numberWithInt:self.addedCount]];
  }
  if (self.hasChangedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"changedCount", [NSNumber numberWithInt:self.changedCount]];
  }
  if (self.hasDeletedCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deletedCount", [NSNumber numberWithInt:self.deletedCount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Response class]]) {
    return NO;
  }
  Response *otherMessage = other;
  return
      [self.plakateArray isEqualToArray:otherMessage.plakateArray] &&
      self.hasAddedCount == otherMessage.hasAddedCount &&
      (!self.hasAddedCount || self.addedCount == otherMessage.addedCount) &&
      self.hasChangedCount == otherMessage.hasChangedCount &&
      (!self.hasChangedCount || self.changedCount == otherMessage.changedCount) &&
      self.hasDeletedCount == otherMessage.hasDeletedCount &&
      (!self.hasDeletedCount || self.deletedCount == otherMessage.deletedCount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  NSUInteger hashCode = 7;
  for (Plakat* element in self.plakateArray) {
    hashCode = hashCode * 31 + [element hash];
  }
  if (self.hasAddedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.addedCount] hash];
  }
  if (self.hasChangedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.changedCount] hash];
  }
  if (self.hasDeletedCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInt:self.deletedCount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface Response_Builder()
@property (strong) Response* result;
@end

@implementation Response_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[Response alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Response_Builder*) clear {
  self.result = [[Response alloc] init];
  return self;
}
- (Response_Builder*) clone {
  return [Response builderWithPrototype:result];
}
- (Response*) defaultInstance {
  return [Response defaultInstance];
}
- (Response*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Response*) buildPartial {
  Response* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (Response_Builder*) mergeFrom:(Response*) other {
  if (other == [Response defaultInstance]) {
    return self;
  }
  if (other.plakateArray.count > 0) {
    if (result.plakateArray == nil) {
      result.plakateArray = [[NSMutableArray alloc] initWithArray:other.plakateArray];
    } else {
      [result.plakateArray addObjectsFromArray:other.plakateArray];
    }
  }
  if (other.hasAddedCount) {
    [self setAddedCount:other.addedCount];
  }
  if (other.hasChangedCount) {
    [self setChangedCount:other.changedCount];
  }
  if (other.hasDeletedCount) {
    [self setDeletedCount:other.deletedCount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Response_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Response_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Plakat_Builder* subBuilder = [Plakat builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlakate:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setAddedCount:[input readInt32]];
        break;
      }
      case 24: {
        [self setChangedCount:[input readInt32]];
        break;
      }
      case 32: {
        [self setDeletedCount:[input readInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray *)plakate {
  return result.plakateArray;
}
- (Plakat*)plakateAtIndex:(NSUInteger)index {
  return [result plakateAtIndex:index];
}
- (Response_Builder *)addPlakate:(Plakat*)value {
  if (result.plakateArray == nil) {
    result.plakateArray = [[NSMutableArray alloc]init];
  }
  [result.plakateArray addObject:value];
  return self;
}
- (Response_Builder *)setPlakateArray:(NSArray *)array {
  result.plakateArray = [[NSMutableArray alloc]init];
  return self;
}
- (Response_Builder *)clearPlakate {
  result.plakateArray = nil;
  return self;
}
- (BOOL) hasAddedCount {
  return result.hasAddedCount;
}
- (int32_t) addedCount {
  return result.addedCount;
}
- (Response_Builder*) setAddedCount:(int32_t) value {
  result.hasAddedCount = YES;
  result.addedCount = value;
  return self;
}
- (Response_Builder*) clearAddedCount {
  result.hasAddedCount = NO;
  result.addedCount = 0;
  return self;
}
- (BOOL) hasChangedCount {
  return result.hasChangedCount;
}
- (int32_t) changedCount {
  return result.changedCount;
}
- (Response_Builder*) setChangedCount:(int32_t) value {
  result.hasChangedCount = YES;
  result.changedCount = value;
  return self;
}
- (Response_Builder*) clearChangedCount {
  result.hasChangedCount = NO;
  result.changedCount = 0;
  return self;
}
- (BOOL) hasDeletedCount {
  return result.hasDeletedCount;
}
- (int32_t) deletedCount {
  return result.deletedCount;
}
- (Response_Builder*) setDeletedCount:(int32_t) value {
  result.hasDeletedCount = YES;
  result.deletedCount = value;
  return self;
}
- (Response_Builder*) clearDeletedCount {
  result.hasDeletedCount = NO;
  result.deletedCount = 0;
  return self;
}
@end

